dist: xenial
os: linux
language: shell

# notifications:
#   slack:
#     rooms:
#       secure:
#     on_success: change
#     on_failure: always
#     on_pull_requests: false

stages:
  - name: 'Test, Build and Deploy'
    if: branch =~ ^master$|^development$|^release

jobs:
  fast_finish: true
  allow_failures:
    - name: Cypress Test
  include:
    - stage: 'Test, Build and Deploy'
      name: 'Lint, Unit Test, Build and Deploy'
      if: branch =~ ^master$|^development$|^release
      before_install: |-
        if [ "master" == "${TRAVIS_BRANCH}" ]; then
          for env_value in $(compgen -v |grep '.*_PRODUCTION$'); do
            eval export ${env_value%_PRODUCTION}="${!env_value}"
          done
          ENVIRONMENT="production"
        elif [[ "${TRAVIS_BRANCH}" == release*  ]]; then
          for env_value in $(compgen -v |grep '.*_STAGING$'); do
            eval export ${env_value%_STAGING}="${!env_value}"
          done
          ENVIRONMENT="staging"
        else
          for env_value in $(compgen -v |grep '.*_DEVELOPMENT$'); do
            eval export ${env_value%_DEVELOPMENT}="${!env_value}"
          done
          ENVIRONMENT="development"
        fi
      install: |-
        # install awscli v2 for ecr upload
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
        unzip /tmp/awscliv2.zip -d /tmp
        sudo /tmp/aws/install
      script: |-
        set -e
        export IMAGE="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_NAME}:v${TRAVIS_BUILD_NUMBER}-build"
        export IMAGE_LATEST="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_NAME}:latest"

        # build test image to run test
        docker build -t test \
          --target installer \
          .
        docker run --rm \
          -v "$PWD/coverage:/srv/coverage" \
          --entrypoint "" \
          test bash -c "
          echo test"

        docker build -t "$IMAGE" -t "$IMAGE_LATEST" \
          --build-arg "NPM_TOKEN=$NPM_TOKEN" \
          .
      deploy:
      ### upload to ecr
      - provider: script
        edge: true
        script: >-
          AWS_ACCESS_KEY_ID=$AWS_ECR_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY=$AWS_ECR_SECRET_ACCESS_KEY
          aws ecr get-login-password | docker login --username AWS --password-stdin
          ${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
          && docker push "$IMAGE"
          && docker push "$IMAGE_LATEST"
        cleanup: false
        on:
          all_branches: true
          condition: $REPO_SKIP_DEPLOY != "true"
